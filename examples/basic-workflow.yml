# Basic Kodelet Action Workflow
#
# This example shows the minimal configuration needed to use Kodelet Action
# for automated issue resolution and PR responses.
#
# Setup:
# 1. Add ANTHROPIC_API_KEY to your repository secrets
# 2. Copy this file to .github/workflows/kodelet.yml in your repository
# 3. Comment "@kodelet" on issues or PRs to trigger automation

name: Background Kodelet

on:
  issue_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review_comment:
    types: [created]
  pull_request_review:
    types: [submitted]

jobs:
  background-agent:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      issues: read
      pull-requests: read
      contents: read
    timeout-minutes: 360  # 6 hours max execution time

    if: |
      (
        (github.event_name == 'issues' && contains(github.event.issue.body, '@kodelet')) ||
        (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@kodelet')) ||
        (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@kodelet')) ||
        (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@kodelet'))
      ) &&
      (
        (github.event.issue.author_association == 'OWNER' || github.event.issue.author_association == 'MEMBER' || github.event.issue.author_association == 'COLLABORATOR') ||
        (github.event.comment.author_association == 'OWNER' || github.event.comment.author_association == 'MEMBER' || github.event.comment.author_association == 'COLLABORATOR') ||
        (github.event.review.author_association == 'OWNER' || github.event.review.author_association == 'MEMBER' || github.event.review.author_association == 'COLLABORATOR')
      )

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run Kodelet
        uses: jingkaihe/kodelet-action@v1
        with:
          anthropic-api-key: ${{ secrets.ANTHROPIC_API_KEY }}
          # All other inputs are automatically populated from GitHub context
          # You can override them if needed:
          # commenter: custom-user
          # event-name: issue_comment
          # issue-number: 123
          # comment-id: 456
          # repository: owner/repo
          # is-pr: false
          # pr-number: 789
          # kodelet-version: latest

          # Optional: Pass additional environment variables to Kodelet
          # env: |
          #   {
          #     "DATABASE_URL": "${{ secrets.DATABASE_URL }}",
          #     "API_BASE_URL": "https://api.example.com",
          #     "DEBUG_MODE": "true"
          #   }

          # use github token if you don't want to install Kodelet app in the repo
          # Considerations:
          # - You can use the token from the GitHub Action, however any code push or PR raise [won't trigger](https://github.com/orgs/community/discussions/25702) the follow up workflow.
          # - You can also use PAT token, however you will need to constantly manage the token rotations, which doesn't scale well.
          # github-token: ${{ secrets.GITHUB_TOKEN }}

          # you can also use custom auth gateway to get access token,
          # if you want to install Kodelet app other than the [default app](https://github.com/apps/kodelet)
          # auth-gateway-endpoint: https://example.com/api/github
